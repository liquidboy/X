// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.190321.3

#pragma once
#include "winrt/SceneLoaderComponent.h"
namespace winrt::SceneLoaderComponent::implementation
{
    template <typename D, typename... I>
    struct WINRT_EBO SceneLoader_base : implements<D, SceneLoaderComponent::SceneLoader, I...>
    {
        using base_type = SceneLoader_base;
        using class_type = SceneLoaderComponent::SceneLoader;
        using implements_type = typename SceneLoader_base::implements_type;
        using implements_type::implements_type;
        
        hstring GetRuntimeClassName() const
        {
            return L"SceneLoaderComponent.SceneLoader";
        }
    };
}
namespace winrt::SceneLoaderComponent::factory_implementation
{
    template <typename D, typename T, typename... I>
    struct WINRT_EBO SceneLoaderT : implements<D, Windows::Foundation::IActivationFactory, I...>
    {
        using instance_type = SceneLoaderComponent::SceneLoader;

        hstring GetRuntimeClassName() const
        {
            return L"SceneLoaderComponent.SceneLoader";
        }
        Windows::Foundation::IInspectable ActivateInstance() const
        {
            return make<T>();
        }
    };
}

#if defined(WINRT_FORCE_INCLUDE_SCENELOADER_XAML_G_H) || __has_include("SceneLoader.xaml.g.h")
#include "SceneLoader.xaml.g.h"
#else

namespace winrt::SceneLoaderComponent::implementation
{
    template <typename D, typename... I>
    using SceneLoaderT = SceneLoader_base<D, I...>;
}

#endif
