// WARNING: Please don't edit this file. It was generated by C++/WinRT v1.0.190111.3

#pragma once

#include "winrt/base.h"


static_assert(winrt::check_version(CPPWINRT_VERSION, "1.0.190111.3"), "Mismatched component and base headers.");
#include "winrt/Windows.Foundation.h"
#include "winrt/Windows.Foundation.Collections.h"
#include "winrt/impl/Windows.Storage.Streams.2.h"
#include "winrt/impl/Windows.UI.Composition.2.h"
#include "winrt/impl/Windows.UI.Composition.Scenes.2.h"
#include "winrt/impl/SceneLoaderComponent.2.h"

namespace winrt::impl {

template <typename D> Windows::UI::Composition::Scenes::SceneNode consume_SceneLoaderComponent_ISceneLoader<D>::Load(Windows::Storage::Streams::IBuffer const& buffer, Windows::UI::Composition::Compositor const& compositor) const
{
    Windows::UI::Composition::Scenes::SceneNode result{ nullptr };
    check_hresult(WINRT_SHIM(SceneLoaderComponent::ISceneLoader)->Load(get_abi(buffer), get_abi(compositor), put_abi(result)));
    return result;
}

template <typename D>
struct produce<D, SceneLoaderComponent::ISceneLoader> : produce_base<D, SceneLoaderComponent::ISceneLoader>
{
    int32_t WINRT_CALL Load(void* buffer, void* compositor, void** result) noexcept final
    {
        try
        {
            *result = nullptr;
            typename D::abi_guard guard(this->shim());
            WINRT_ASSERT_DECLARATION(Load, WINRT_WRAP(Windows::UI::Composition::Scenes::SceneNode), Windows::Storage::Streams::IBuffer const&, Windows::UI::Composition::Compositor const&);
            *result = detach_from<Windows::UI::Composition::Scenes::SceneNode>(this->shim().Load(*reinterpret_cast<Windows::Storage::Streams::IBuffer const*>(&buffer), *reinterpret_cast<Windows::UI::Composition::Compositor const*>(&compositor)));
            return 0;
        }
        catch (...) { return to_hresult(); }
    }
};

}

WINRT_EXPORT namespace winrt::SceneLoaderComponent {

inline SceneLoader::SceneLoader() :
    SceneLoader(impl::call_factory<SceneLoader>([](auto&& f) { return f.template ActivateInstance<SceneLoader>(); }))
{}

}

namespace winrt::impl {

}

WINRT_EXPORT namespace winrt::experimental::reflect {

}

WINRT_EXPORT namespace std {

template<> struct hash<winrt::SceneLoaderComponent::ISceneLoader> : winrt::impl::hash_base<winrt::SceneLoaderComponent::ISceneLoader> {};
template<> struct hash<winrt::SceneLoaderComponent::SceneLoader> : winrt::impl::hash_base<winrt::SceneLoaderComponent::SceneLoader> {};

}
