// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.190321.3

#ifndef WINRT_SceneLoaderComponent_H
#define WINRT_SceneLoaderComponent_H
#include "winrt/base.h"
static_assert(winrt::check_version(CPPWINRT_VERSION, "2.0.190321.3"), "Mismatched C++/WinRT headers.");
#include "winrt/impl/Windows.Storage.Streams.2.h"
#include "winrt/impl/Windows.UI.Composition.2.h"
#include "winrt/impl/Windows.UI.Composition.Scenes.2.h"
#include "winrt/impl/SceneLoaderComponent.2.h"
namespace winrt::impl
{
    template <typename D> Windows::UI::Composition::Scenes::SceneNode consume_SceneLoaderComponent_ISceneLoader<D>::Load(Windows::Storage::Streams::IBuffer const& buffer, Windows::UI::Composition::Compositor const& compositor) const
    {
        void* result{};
        check_hresult(WINRT_SHIM(SceneLoaderComponent::ISceneLoader)->Load(get_abi(buffer), get_abi(compositor), &result));
        return { result, take_ownership_from_abi };
    }
    template <typename D>
    struct produce<D, SceneLoaderComponent::ISceneLoader> : produce_base<D, SceneLoaderComponent::ISceneLoader>
    {
        int32_t WINRT_CALL Load(void* buffer, void* compositor, void** result) noexcept final
        {
            clear_abi(result);
            try
            {
                typename D::abi_guard guard(this->shim());
                *result = detach_from<Windows::UI::Composition::Scenes::SceneNode>(this->shim().Load(*reinterpret_cast<Windows::Storage::Streams::IBuffer const*>(&buffer), *reinterpret_cast<Windows::UI::Composition::Compositor const*>(&compositor)));
                return 0;
            }
            catch (...) { return to_hresult(); }
        }
    };
}
namespace winrt::SceneLoaderComponent
{
    inline SceneLoader::SceneLoader() :
        SceneLoader(impl::call_factory<SceneLoader>([](auto&& f) { return f.template ActivateInstance<SceneLoader>(); }))
    {
    }
}
namespace std
{
    template<> struct hash<winrt::SceneLoaderComponent::ISceneLoader> : winrt::impl::hash_base<winrt::SceneLoaderComponent::ISceneLoader> {};
    template<> struct hash<winrt::SceneLoaderComponent::SceneLoader> : winrt::impl::hash_base<winrt::SceneLoaderComponent::SceneLoader> {};
}
#endif
