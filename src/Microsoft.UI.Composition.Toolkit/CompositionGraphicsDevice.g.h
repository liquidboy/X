// WARNING: Please don't edit this file. It was generated by C++/WinRT v1.0.170906.1

#pragma once

#include "module.h"
#include "winrt/Windows.Foundation.h"
#include "winrt/Windows.Graphics.DirectX.h"
#include "winrt/Windows.Storage.h"
#include "winrt/Windows.UI.Composition.h"
#include "winrt/Microsoft.UI.Composition.Toolkit.h"

namespace winrt::Microsoft::UI::Composition::Toolkit::implementation {

template <typename D, typename ... I>
struct WINRT_EBO CompositionGraphicsDevice_base : impl::module_lock, implements<D, Microsoft::UI::Composition::Toolkit::ICompositionGraphicsDevice, Windows::Foundation::IClosable, I ...>
{
    using class_type = Microsoft::UI::Composition::Toolkit::CompositionGraphicsDevice;
    
    operator class_type() const noexcept
    {
        static_assert(std::is_same_v<typename D::first_interface, impl::default_interface_t<class_type>>);
        class_type result{ nullptr };
        attach_abi(result, detach_abi(static_cast<impl::default_interface_t<class_type>>(*this)));
        return result;
    }

    hstring GetRuntimeClassName() const
    {
        return L"Microsoft.UI.Composition.Toolkit.CompositionGraphicsDevice";
    }
};

}

namespace winrt::Microsoft::UI::Composition::Toolkit::factory_implementation {

template <typename D, typename T, typename ... I>
struct WINRT_EBO CompositionGraphicsDeviceT : impl::module_lock, implements<D, Windows::Foundation::IActivationFactory, Microsoft::UI::Composition::Toolkit::ICompositionGraphicsDeviceStatics, I ...>
{
    hstring GetRuntimeClassName() const
    {
        return L"Microsoft.UI.Composition.Toolkit.CompositionGraphicsDevice";
    }

    Windows::Foundation::IInspectable ActivateInstance() const
    {
        throw hresult_not_implemented();
    }

    Microsoft::UI::Composition::Toolkit::CompositionGraphicsDevice CreateCompositionGraphicsDevice(Windows::UI::Composition::Compositor const& compositor)
    {
        return T::CreateCompositionGraphicsDevice(compositor);
    }
};

}

#if defined(WINRT_FORCE_INCLUDE_COMPOSITIONGRAPHICSDEVICE_XAML_G_H) || __has_include("CompositionGraphicsDevice.xaml.g.h")

#include "CompositionGraphicsDevice.xaml.g.h"

#else

namespace winrt::Microsoft::UI::Composition::Toolkit::implementation
{
    template <typename D, typename ... I>
    using CompositionGraphicsDeviceT = CompositionGraphicsDevice_base<D, I ...>;
}

#endif
